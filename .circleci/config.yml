version: 2.1

orbs:
  slack: circleci/slack@3.4.2

commands:
  auto-destruct-env:
    description: Destroy frontend and backend infrastructure
    steps:
      - run:
          name: Delete all files from the current S3 bucket
          command: |
            set TERM=xterm               
            if aws s3api head-bucket --bucket udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            then
              aws s3 rm s3://udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
            fi
          when: on_fail
      - run:
          name: Delete the current CloudFormation stacks
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  write-envvars-file:
    description: Command used for creating env file
    steps:
      - run:
          name: Add env vars to env file
          command: |
            echo "NODE_ENV=production" >> backend/.env
            echo "VERSION=1" >> backend/.env
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
            echo "TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}" >> backend/.env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> backend/.env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env  
  
  revert-migration:
    description: Revert the last migration if smoke tests are failing in the current workflow
    steps:
      - run:
          when: on_fail
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_12.x | bash -
            yum -y install nodejs
      - checkout
      - write-envvars-file
      - run:
          when: on_fail
          name: Load migration status from https://memstash.io/ and revert migrations if necessary
          command: |
            DBMIGRATION_FLAG=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/migration_completion)
            echo ${DBMIGRATION_FLAG}
            if [[ ${DBMIGRATION_FLAG} == 1 ]]
            then
              cd backend
              npm i
              npm run migrations:revert
            fi         
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build application frontend
          command: |
            cd frontend
            npm i
            npm run build
      - slack/status:
          fail_only: true
            
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build application backend
          command: |
            cd backend
            npm i
            npm run build
      - slack/status:
          fail_only: true
            
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm i
            npm i jest-junit
            npm run test -- --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: /tmp/reports/junit/
      - store_test_results:
          path: /tmp/reports/junit/     
      - slack/status:
          fail_only: true
          
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test backend
          command: |
            cd backend
            npm i
            npm install jest-junit
            npm run test -- --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: /tmp/reports/junit/
      - store_test_results:
          path: /tmp/reports/junit/
      - slack/status:
          fail_only: true
            
  analyze-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Analyze and resolve frontend dependencies
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical              
      - slack/status:
          fail_only: true            
            
  analyze-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Analyze and resolve backend dependencies
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical
      - slack/status:
          fail_only: true
            
  deploy-infra:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip      
      - run:
          name: deploy backend infra
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: deploy frontend infra
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project="${CIRCLE_WORKFLOW_ID:0:7}"    
      - run:
          name: Add Backend EC2 Instance IP to inventory and save to memstash
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt)              
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - auto-destruct-env
      - slack/status:
          fail_only: true 

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            apk add --no-cache openssh-client
            apk add --no-cache --upgrade bash
            pip install awscli
      - add_ssh_keys:
          fingerprints: ["0a:ab:9c:78:ab:04:4e:29:a7:dc:63:62:36:ad:c8:c4"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm
            pip install awscli
      - write-envvars-file
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt main.yml
      - revert-migration      
      - auto-destruct-env
      - slack/status:
          fail_only: true

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - write-envvars-file      
      - run:
          name: Run migrations and save status to https://memstash.io/
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
            npm run migrations > migrations.txt            
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}"  --request PUT \
              --data $( grep -c "No migrations are pending" migrations.txt ) \
              https://api.memstash.io/values/migration_completion
            cat migrations.txt
      - slack/status:
          fail_only: true

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache nodejs
            apk add --no-cache npm
            apk add --no-cache bash
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=$API_URL" >> frontend/.env
            echo "${API_URL}"
      - run:
          name: "Baking backend API_URL into the frontend"
          command: |
            npm install webpack-dev-server -g
            cd frontend
            npm i
            npm run build
            npm audit fix --audit-level=critical --force
      - run: 
          name: Copy built frontend files to the S3 bucket
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-frontend-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive  
      - revert-migration
      - auto-destruct-env
      - slack/status:
          fail_only: true

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - write-envvars-file 
      - run:
          name: Smoke test backend
          command: |
            export BACKEND_IP=$(aws ec2 --region us-east-1 describe-instances \
                  --filters Name=instance-state-name,Values=running Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text)
            echo "Backend IP: ${BACKEND_IP}"      
            EC2_URL="http://${BACKEND_IP}:3030/api/status"
            echo ${EC2_URL}
            curl ${EC2_URL}
            if curl -s ${EC2_URL} | grep "ok"
            then
              exit 0
            else
              exit 1
            fi            
      - run:
          name: Smoke test frontend
          command: |
            pwd
            APP_URL="http://udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employee"
            if curl -s ${APP_URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - revert-migration
      - auto-destruct-env
      - slack/status:
          fail_only: true 
                      
  deploy-cloudfront-and-cleanup:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout    
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            apk add --update bash
            pip install awscli
      - add_ssh_keys:
          fingerprints: ["0a:ab:9c:78:ab:04:4e:29:a7:dc:63:62:36:ad:c8:c4"]
      - run:
          name: Update cloudfront distribution
          command: |
            set TERM=xterm
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text)
            echo Old Workflow Id: "${OldWorkflowID}"
            if [ -n "${OldWorkflowID}" ]
            then
            echo "Update existing CloudFront stack"
            aws cloudformation update-stack  \
              --stack-name udapeople-cloudfront \
              --template-body file://./.circleci/files/cloudfront.yml \
              --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags 'Key=project,Value=udapeople'
            else              
            echo "Create CloudFront stack"
            aws cloudformation create-stack  \
              --stack-name udapeople-cloudfront \
              --template-body file://./.circleci/files/cloudfront.yml \
              --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags 'Key=project,Value=udapeople'            
            fi
            if [ -n "${OldWorkflowID}" ]
            then
              echo "Empty old S3 bucket and delete old frontend stack"
              aws s3 rm s3://udapeople-frontend-${OldWorkflowID}/ --recursive
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
              echo "Delete old backend stack"              
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
            fi
      - auto-destruct-env
      - slack/status:
          fail_only: true

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - analyze-frontend:
          requires: [build-frontend]
      - analyze-backend:
          requires: [build-backend]
      - deploy-infra:
          requires: [test-frontend, test-backend, analyze-frontend, analyze-backend]
          filters:
            branches:
              only:
                - master
      - deploy-backend:
          requires: [deploy-infra]
          filters:
            branches:
              only:
                - master
      - run-migrations: 
          requires: [deploy-backend]
          filters:
            branches:
              only: master      
      - deploy-frontend:
          requires: [deploy-backend]
          filters:
            branches:
              only:
                - master          
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
          filters:
            branches:
              only:
                - master
      - deploy-cloudfront-and-cleanup:
          requires: [smoke-test]
          filters:
            branches:
              only:
                - master