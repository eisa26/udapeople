commands: 
  destroy-environment: 
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: "string" 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: "string"    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            #SUCCESS = 1
            SUCCESS=$(curl -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
                --request GET \
                https://api.memstash.io/values/migrations-<< parameters.workflow_id >>)
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
              cd backend
              npm i
              npm run migration:revert
            fi
jobs: 
   build-backend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            cd ~/project/backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
   build-frontend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd ~/project/frontend
            npm install
            npm i --package-lock-only
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
   cleanup: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="kk1j287dhjppm2410"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo "${OldWorkflowID}"
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo "${STACKS}"            
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]; then
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          
   cloudfront-update: 
    docker: 
      - image: amazon/aws-cli
    steps: 
      - checkout
      - run: 
          name: "Update cloudfront distribution"
          command: |
              export OLD_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
              
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
              
              curl -H "Content-Type: text/plain" -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
                --request PUT --data "${OLD_WORKFLOW_ID}" \
                https://api.memstash.io/values/workflow_id
              
              echo Old Workflow Id: ${OLD_WORKFLOW_ID}
              echo Actual Workflow Id: ${CIRCLE_WORKFLOW_ID:0:7}
              echo Stacks available: ${STACKS}
              
              aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name production-distro \
                --region us-west-2\
                --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
                --tags project=udapeople
          
      - revert-migrations: 
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment: 
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
   configure-infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c8:54:3d:fc:29:3f:b3:48:c0:05:ec:07:91:0a:e8:37"]
      - attach_workspace:
          at: ~/project
      - run:
          name: Install ansible.
          command: |
           apk add --update ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Check there is .env file at workspace.
          command: |
            cat backend/.env
      - run:
          name: Setup inventory file
          command: |
            cd .circleci/ansible
            echo "[web]" >> inventory.txt
            URLS=$(curl -H "token: 1e1e96f7-a791-42b5-b240-bd5407aa9c51" --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7})
            echo $URLS >> inventory.txt
            cat inventory.txt
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            echo "Inventory content"
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      
  
   deploy-backend: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["6d:46:c1:33:27:ca:ea:da:85:cd:bf:b8:ff:c4:4c:69"]
      # attach workspace
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl openssh-client
            pip install awscli
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            pwd            
            cd .circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          
   deploy-frontend: 
    docker:
       # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash - #
            yum -y install nodejs
            yum -y install tar gzipi
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: 1e1e96f7-a791-42b5-b240-bd5407aa9c51" --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7})
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            npm install webpack-dev-server -g
            cd frontend
            npm install chokidar
            npm install
            npm run build
            aws s3 cp ./dist s3://udapeople-kk1j287dhjppmz7894 --recursive
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}       
   deploy-infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout #checkout code from git
      - run: yum install -y tar #(install dependencies)
      - run: yum install -y gzip #(install dependencies)
      - run:
          name: Ensure back-end infrastructure exists #(deploying backend. get backend ip and save to memstash for frontend use)
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=backend-tag \
              --stack-name "Udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"   
      - run:
          name: Ensure front-end infrastructure exist
          command: |
             aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=backend-tag \
              --stack-name "Udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
              URLS=$(aws ec2 describe-instances --region us-west-2 --query "Reservations[*].Instances[*].PublicIpAddress"  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"  --output text) 
              curl -H "Content-Type: text/plain" -H "token: e2a60db0-bc3c-46fe-ad15-36e00ba41dea" --request PUT --data "$URLS" https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
             export backend_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=ebackend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt)
              cat ./.circleci/ansible/inventory.txt
      - run:
          name: Add .env vars to backend distro
          command: |
            echo ENVIRONMENT=development > backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=development >> "backend/.env"
      - restore_cache:
          keys: [backend-build]
      - persist_to_workspace:
          root: ~/project
          paths:
            - .circleci/ansible/inventory.txt
            - backend/
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          
   run-migrations: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          no_output_timeout: 7m
          command: |
            pwd
            ls
            #cd backend && npm run migrations | tee migrations-${CIRCLE_WORKFLOW_ID}.txt
            cd backend
            cat .env
            npm run migrations | tee migrations-${CIRCLE_WORKFLOW_ID}.txt
            cat migrations-${CIRCLE_WORKFLOW_ID}.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if grep -q "success" migrations-${CIRCLE_WORKFLOW_ID}.txt
            then
              curl -H "Content-Type: text/plain" -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
              --request PUT \
              --data '1' \
              https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID:0:7}
            else
              curl -H "Content-Type: text/plain" -H "token: 32f0f419-eff1-45b7-9ac4-fe8b3ab08734" \
              --request PUT \
              --data '0' \
              https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID:0:7}
            fi
            echo Key: migrations-${CIRCLE_WORKFLOW_ID:0:7}  
   scan-backend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: scan-backend scan
          command: |
            pwd
            cd ~/project/backend
            pwd
            ls
            #npm install
            #npm audit --audit-level=critical
            #npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: test-backend 
          
   scan-frontend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
    
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyze frontend.
          command: |
            cd frontend
            #npm audit --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
          
   smoke-test: 
    docker:
      # Lightweight Docker image
      - image: python:3.7-alpine3.11

    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              curl \
              python3 \
              py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install \
              awscli \
              && rm -rf /var/cache/apk/*
      - run:
          name: Backend smoke test.
          command: |
            cd ~/project/backend
            touch .env
            export BACKENDIP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text) >> .env
            export BACKENDDNS=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text) >> .env
            echo "BACKENDIP: ${BACKENDIP}"
            echo "BACKENDNS: ${BACKENDDNS}"
            echo "BACKENDIP: ${API_URL}"
          
          
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s  "http://udapeople-kk1j287dhjppmz7894.s3-website-us-west-2.amazonaws.com" | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      #- revert-migrations:
      #    workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      #- destroy-environment:
      #    workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          
   test-backend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test-backend test
          command: |
            cd backend
            #npm audit fix
            #npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build  
          
   test-frontend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test.
          command: |
            cd frontend
            #npm audit fix
            #npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
          
version: 2.1
workflows: 
  deployment: 
    jobs: 
      - build-frontend
      - build-backend
      - test-frontend: 
          requires: 
            - build-frontend
      - test-backend: 
          requires: 
            - build-backend
      - scan-backend: 
          requires: 
            - build-backend
      - scan-frontend: 
          requires: 
            - build-frontend
      - deploy-infrastructure: 
          filters: 
            branches: 
              only: 
                - master
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure: 
          requires: 
            - deploy-infrastructure
      - run-migrations: 
          requires: 
            - configure-infrastructure
      - deploy-frontend: 
          requires: 
            - run-migrations
      - deploy-backend: 
          requires: 
            - run-migrations
      - smoke-test: 
          requires: 
            - deploy-backend
            - deploy-frontend
      - cloudfront-update: 
          requires: 
            - smoke-test
      - cleanup: 
          requires: 
            - cloudfront-update